// loading packages not loaded by default
load "Element_Mixte" 	// the Raviart-Thomas elements for flux equilibration
load "Element_P3"	 	// the Lagrange P3 element 
load "Element_P4"	 	// the Lagrange P4 element

macro Pcont P1		// Lagrange pw polynomial space of the FE approximation: "P1" or "P2" or "P3" or "P4"
macro Pcontl P0		// Lagrange pw polynomial space of the gradient of the FE approximation: "P1" or "P2" or "P3"
macro Pcontp P2		// polynomials for plotting the exact solution (ideally Pcont + 1): "P2" or "P3" or "P4"
macro RT RT1		// RT pw polynomial space: "RT0" or "RT1" or "RT2" (more not available in FreeFem++)
macro Pdisc P1dc	// Lagrange multipliers of the RT space: "P0" or "P1dc" or "P2dc"

// macro definitions
macro Div(u1,u2) (dx(u1)+dy(u2))  //
macro Grad(u) [dx(u),dy(u)]   //

macro norm(u) sqrt(u[0]^2 + u[1]^2) //

macro Pdiscp P2dc	// polynomials for plotting the fluxes: "P2dc"
macro NbIso 21		// number of isovalues for plotting (more than 20 unless FreeFem++ bug fixed)
macro SolverGlob sparsesolver	// global system linear solver: CG or sparsesolver
macro SolverLoc sparsesolver	// local systems linear solver: LU or sparsesolver

real em = 0.99, ep = 1.01; // to avoid rounding errors for visualisation

// standard matlab jet colormap
real[int] jet = [0.6667, 1.0000, 0.5625,  0.6667, 1.0000, 0.6250,  0.6667, 1.0000, 0.6875,  0.6667, 1.0000, 0.7500,  0.6667, 1.0000, 0.8125, 0.6667, 1.0000, 0.8750,
 0.6667, 1.0000, 0.9375, 0.6667, 1.0000, 1.0000, 0.6563, 1.0000, 1.0000, 0.6458, 1.0000, 1.0000, 0.6354, 1.0000, 1.0000, 0.6250, 1.0000, 1.0000, 0.6146, 1.0000, 1.0000,
 0.6042, 1.0000, 1.0000, 0.5938, 1.0000, 1.0000, 0.5833, 1.0000, 1.0000, 0.5729, 1.0000, 1.0000, 0.5625, 1.0000, 1.0000, 0.5521, 1.0000, 1.0000, 0.5417, 1.0000, 1.0000,
 0.5313, 1.0000, 1.0000, 0.5208, 1.0000, 1.0000, 0.5104, 1.0000, 1.0000, 0.5000, 1.0000, 1.0000, 0.4889, 0.9375, 1.0000, 0.4762, 0.8750, 1.0000, 0.4615, 0.8125, 1.0000,
 0.4444, 0.7500, 1.0000, 0.4242, 0.6875, 1.0000, 0.4000, 0.6250, 1.0000, 0.3704, 0.5625, 1.0000, 0.3333, 0.5000, 1.0000, 0.2963, 0.5625, 1.0000, 0.2667, 0.6250, 1.0000,
 0.2424, 0.6875, 1.0000, 0.2222, 0.7500, 1.0000, 0.2051, 0.8125, 1.0000, 0.1905, 0.8750, 1.0000, 0.1778, 0.9375, 1.0000, 0.1667, 1.0000, 1.0000, 0.1563, 1.0000, 1.0000,
 0.1458, 1.0000, 1.0000, 0.1354, 1.0000, 1.0000, 0.1250, 1.0000, 1.0000, 0.1146, 1.0000, 1.0000, 0.1042, 1.0000, 1.0000, 0.0938, 1.0000, 1.0000, 0.0833, 1.0000, 1.0000,
 0.0729, 1.0000, 1.0000, 0.0625, 1.0000, 1.0000, 0.0521, 1.0000, 1.0000, 0.0417, 1.0000, 1.0000, 0.0313, 1.0000, 1.0000, 0.0208, 1.0000, 1.0000, 0.0104, 1.0000, 1.0000,
 0, 1.0000, 1.0000, 0, 1.0000, 0.9375, 0, 1.0000, 0.8750, 0, 1.0000, 0.8125, 0, 1.0000, 0.7500, 0, 1.0000, 0.6875, 0, 1.0000, 0.6250, 0, 1.0000, 0.5625, 0, 1.0000, 0.5000];

// grayscale colormap
real[int] gray(192);
for(int i=0; i<64; i++)
	{
	gray[3*i]=0;
	gray[3*i+1]=0;
	gray[3*i+2]=real(i)/63;
	}

// inverse grayscale colormap
real[int] grayinv(192);
for(int i=0; i<64; i++)
	{
	grayinv[3*i]=0;
	grayinv[3*i+1]=0;
	grayinv[3*i+2]=1-real(i)/63;
	}
